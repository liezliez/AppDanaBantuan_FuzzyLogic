# -*- coding: utf-8 -*-
"""GA_Tubes_Liez_sumpahudahjadi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13SjwdzN2dJD03WLz1xLOpuSoah_k2arf

#HEADER
"""

import random
import numpy as np

"""#FUNGSI

Bikin kromosom & populasi
"""

def generateKromosom(panjang_krom):
  kromosom = []
  for i in range(panjang_krom):
    kromosom.append(random.randint(0,1))
  return kromosom


def generatePopulasi(kromosom):
  population = []
  for i in range(banyak_krom):
    population.append(generateKromosom(panjang_krom))
  return population

#generateKromosom(panjang_krom)
#generatePopulasi(generateKromosom(panjang_krom))

"""Bikin Fenotip & hitung fitness"""

#Fungsi Soal
def rumusBgst(setengah,tandain):
  bawah = 0
  kanan = 0
  for i in range(len(setengah)):
    bawah = bawah + 2**(-1)
  for i in range(len(setengah)):
    kanan = kanan + setengah[i] * 2**(-i)
  if tandain == 1:
    return b1[0] + ((b1[1]+b1[0])/bawah) * kanan
  else :
    return b2[0] + ((b2[1]-b2[0])/bawah) * kanan

def x1(krom):
  x1 = rumusBgst(krom[:len(krom)//2],1)
  return x1

def x2(krom):
   x2 = rumusBgst(krom[len(krom)//2:],2)
   return x2

def rumusFenotip(x1,x2):
  return np.cos(x1)*np.sin(x2)-(x1/(x2**2+1))

def fitness(kromosom):
  return (-rumusFenotip(x1(kromosom),x2(kromosom)))

def evaluate(population):
  totalFitness = []
  for i in range (len(population)):
    totalFitness.append(fitness(population[i]))
  return totalFitness

def popFit(population,fitness):
  terurut = sorted(zip(population,fitness), key=lambda x:x[1], reverse=True)
  return terurut

#popFit(population,evaluate(population))

#Pemilihan orang tua untuk kromosom basis anak
def pilih_ortu(populationFitness):
  choosen = []
  parent1 = populationFitness[0][0]
  parent2 = populationFitness[1][0]
  return parent1,parent2

"""Elitism"""

#Dipilih 2 kromosom terbaik
def elitism(population,fitness):
  isiSort = sorted(zip(population,fitness), key=lambda x:x[1], reverse=True)
  baru = []
  i = 0
  while (i < 4) :
    baru.append(isiSort[i][0])
    i += 2
  return baru

#fitness = evaluate(population)

"""Crossover & Mutasi"""

def crossover(parent1,parent2,probabilitas):
  
  rand = random.random()
  if (rand <= probabilitas):
    potong_depan1 = parent1[:len(parent1)//2]
    potong_belakang2 = parent2[len(parent2)//2:]
    child = potong_depan1+potong_belakang2
    return child
  else :
    child = parent1
    return child

#crossover(parent1,parent2,pC)

def mutasi(child,probabilitas):
  rand = random.random()
  mutation = child
  if (rand <= probabilitas):
    r2 = np.random.randint(0,len(child))
    r3 = np.random.randint(0,2)
    mutation[r2] = r3
  return mutation


#mutasi([1,0,1,0,1,0],1)

"""Ganti Generasi"""

def gantiGenerasi (population): #new_population
  return population

"""#MAIN PROGRAM"""

# ============================ KONSTANTA ============================

#batasan rumus soal
b1 = [-1,2]
b2 = [-1,1]
#probabilitas crossover & mutasi
pC = 0.7
pM = 0.2
#variabel kromosom,populasi & generasi
panjang_krom = 32
banyak_krom = 10 #banyak kromosom tiap generasi
max_gen = 15 #banyaknya evolusi generasi


# ============================ MAIN PROGRAM ============================

#Bikin populasi
population = generatePopulasi(generateKromosom(panjang_krom))
gen = 1
while gen <= max_gen :
  #hitung semua fitness
  popFitness = []
  new_population = []
  popFitness = popFit(population,evaluate(population))
  #masukin elitism ke new Population
  elit1 = elitism (population,evaluate(population))[0]
  elit2 = elitism (population,evaluate(population))[1]
  new_population.append(elit1)
  new_population.append(elit2)
  #pilih parent untuk basis kromosom anak
  tampungan = 1
  while (tampungan < banyak_krom-1) :
    parent1,parent2 = pilih_ortu(popFitness)
    child = crossover(parent1,parent2,pC)
    child = mutasi(child,pM)
    new_population.append(child)
    tampungan += 1
  print("gen : ",gen," ---------------------------------------------------------------------------------------------------------------")
  for i in range (banyak_krom):
    print(popFitness[i])
  population = gantiGenerasi(new_population)
  gen += 1

best = popFitness[0][0]
print("=========================================================================================================================================")
print("Kromosom Terbaik : ", best)
print("x1 : ",x1(best))
print("x2 : ",x2(best))
print("dengan nilai Fitness : ",popFitness[0][1])